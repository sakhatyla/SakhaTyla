trigger: 
- master

pr: none

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
    
  jobs:
  - job: Build
    steps:
    - task: DockerCompose@1
      displayName: docker-compose build
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'bacr(3)(c4530747-c19d-4a6d-b3b6-8fa1904c8b65)'
        azureContainerRegistry: '{"loginServer":"bacrhub.azurecr.io", "id" : "/subscriptions/c4530747-c19d-4a6d-b3b6-8fa1904c8b65/resourceGroups/bacr/providers/Microsoft.ContainerRegistry/registries/bacrhub"}'
        dockerComposeFile: '**/docker-compose.yaml'
        projectName: 'sakhatyla'
        action: 'Build services'
        additionalImageTags: '$(Build.BuildNumber)'
        includeLatestTag: true
    - task: DockerCompose@1
      displayName: docker-compose push
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'bacr(3)(c4530747-c19d-4a6d-b3b6-8fa1904c8b65)'
        azureContainerRegistry: '{"loginServer":"bacrhub.azurecr.io", "id" : "/subscriptions/c4530747-c19d-4a6d-b3b6-8fa1904c8b65/resourceGroups/bacr/providers/Microsoft.ContainerRegistry/registries/bacrhub"}'
        dockerComposeFile: '**/docker-compose.yaml'
        projectName: 'sakhatyla'
        action: 'Push services'
        additionalImageTags: '$(Build.BuildNumber)'
        includeLatestTag: true
    - task: CopyFiles@2
      displayName: copy docker-compose.yaml
      inputs:
        Contents: 'docker-compose.yaml'
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: file-creator@5
      displayName: create docker-compose.Release.yaml
      inputs:
        fileoverwrite: true
        filepath: '$(Build.ArtifactStagingDirectory)/docker-compose.Release.yaml'
        filecontent: |
          services:
            web:
              image: 'bacrhub.azurecr.io/sakhatyla_web:$(Build.BuildNumber)'
            webng:
              image: 'bacrhub.azurecr.io/sakhatyla_webng:$(Build.BuildNumber)'
            site:
              image: 'bacrhub.azurecr.io/sakhatyla_site:$(Build.BuildNumber)'
            worker:
              image: 'bacrhub.azurecr.io/sakhatyla_worker:$(Build.BuildNumber)'
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(Build.ArtifactStagingDirectory)
        artifact: DockerCompose

- stage: Production
  variables:
  - group: SakhaTyla-Production
  jobs:
  - deployment: DeployApp
    pool:
      vmImage: 'ubuntu-latest'
    environment:
      name: Production
      resourceType: VirtualMachine
    variables:
      DbHost: db
      DbName: SakhaTyla-$(Environment.Name)
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: DockerCompose
            - task: CopyFiles@2
              displayName: copy artifacts
              inputs:
                SourceFolder: '$(Pipeline.Workspace)/DockerCompose/'
                Contents: '**'
                TargetFolder: '$(AppDirectory)'
                OverWrite: true
            - task: file-creator@5
              displayName: create docker-compose.Environment.yaml
              inputs:
                fileoverwrite: true
                filepath: '$(AppDirectory)/docker-compose.$(Environment.Name).yaml'
                filecontent: |
                  services:
                    web:
                      environment:
                        ASPNETCORE_URLS: 'http://+:5000'
                        ConnectionStrings__DefaultConnection: 'Server=tcp:$(DbHost),1433;Initial Catalog=$(DbName);Persist Security Info=False;User ID=$(DbUser);Password=$(DbPassword);MultipleActiveResultSets=False;Encrypt=False;Connection Timeout=30;'
                        IdentityServer__Clients__SakhaTyla.Web.Ng__RedirectUri: '$(AdminUrl)/authentication/login-callback'
                        IdentityServer__Clients__SakhaTyla.Web.Ng__LogoutUri: '$(AdminUrl)/authentication/logout-callback'
                        IdentityServer__Key__Type: File
                        IdentityServer__Key__FilePath: '$(CertificatePath)'
                        IdentityServer__Key__Password: '$(CertificatePassword)'
                        Services__SakhaTyla.Core.FileStorage.IFileStorage: SakhaTyla.Infrastructure.FileStorage.AWSS3Storage
                        AWSS3Storage__AccessKey: '$(S3AccessKey)'
                        AWSS3Storage__SecretKey: '$(S3SecretKey)'
                        AWSS3Storage__BucketName: '$(S3BucketName)'
                        AWSS3Storage__ServiceUrl: '$(S3ServiceUrl)'
                        Messaging__ConnectionUrl: 'rabbitmq://mq'
                        Messaging__Username: '$(MqUsername)'
                        Messaging__Password: '$(MqPassword)'
                        Authority: '$(IdUrl)'
                        Cors__Origin__0: '$(AdminUrl)'
                        Cors__Origin__1: '$(SiteUrl)'
                        Lucene__IndexPath: /index
                        Lucene__HunspellPath: /var/hunspell
                        EmailSender__DefaultFrom: 'SakhaTyla.Ru <sakhatranslate@sakhatyla.ru>'
                        EmailSender__SmtpServer: '$(EmailSmtpServer)'
                        EmailSender__SmtpPort: '$(EmailSmtpPort)'
                        EmailSender__UserName: '$(EmailUsername)'
                        EmailSender__Password: '$(EmailPassword)'
                        EmailSender__EnableSsl: 'true'
                        VIRTUAL_HOST: '$(IdHost)'
                        LETSENCRYPT_HOST: '$(IdHost)'
                        LETSENCRYPT_EMAIL: 'sakhatranslate@sakhatyla.ru'
                      volumes:
                        - ./cert:/var/cert
                        - ./hunspell:/var/hunspell
                        - index:/index
                        - dpkeys:/root/.aspnet/DataProtection-Keys
                      restart: always
                    webng:
                      build:
                        context: .
                      volumes:
                        - ./webng/config.json:/usr/share/nginx/html/assets/config.json
                      environment:
                        VIRTUAL_HOST: '$(AdminHost)'
                        LETSENCRYPT_HOST: '$(AdminHost)'
                        LETSENCRYPT_EMAIL: 'sakhatranslate@sakhatyla.ru'
                      restart: always
                    site:
                      environment:
                        ASPNETCORE_URLS: 'http://+:5000'
                        ConnectionStrings__DefaultConnection: 'Server=tcp:$(DbHost),1433;Initial Catalog=$(DbName);Persist Security Info=False;User ID=$(DbUser);Password=$(DbPassword);MultipleActiveResultSets=False;Encrypt=False;Connection Timeout=30;'
                        Services__SakhaTyla.Core.FileStorage.IFileStorage: SakhaTyla.Infrastructure.FileStorage.AWSS3Storage
                        AWSS3Storage__AccessKey: '$(S3AccessKey)'
                        AWSS3Storage__SecretKey: '$(S3SecretKey)'
                        AWSS3Storage__BucketName: '$(S3BucketName)'
                        AWSS3Storage__ServiceUrl: '$(S3ServiceUrl)'
                        Messaging__ConnectionUrl: 'rabbitmq://mq'
                        Messaging__Username: '$(MqUsername)'
                        Messaging__Password: '$(MqPassword)'
                        Lucene__IndexPath: /index
                        Lucene__HunspellPath: /var/hunspell
                        Server__ApiUrl: '$(IdUrl)'
                        VIRTUAL_HOST: '$(SiteHost),$(SiteWwwHost)'
                        LETSENCRYPT_HOST: '$(SiteHost),$(SiteWwwHost)'
                        LETSENCRYPT_EMAIL: 'sakhatranslate@sakhatyla.ru'
                      volumes:
                        - ./hunspell:/var/hunspell
                        - index:/index
                        - dpkeys:/root/.aspnet/DataProtection-Keys
                      restart: always
                    worker:
                      environment:
                        ConnectionStrings__DefaultConnection: 'Server=tcp:$(DbHost),1433;Initial Catalog=$(DbName);Persist Security Info=False;User ID=$(DbUser);Password=$(DbPassword);MultipleActiveResultSets=False;Encrypt=False;Connection Timeout=30;'
                        Services__SakhaTyla.Core.FileStorage.IFileStorage: SakhaTyla.Infrastructure.FileStorage.AWSS3Storage
                        AWSS3Storage__AccessKey: '$(S3AccessKey)'
                        AWSS3Storage__SecretKey: '$(S3SecretKey)'
                        AWSS3Storage__BucketName: '$(S3BucketName)'
                        AWSS3Storage__ServiceUrl: '$(S3ServiceUrl)'
                        Messaging__ConnectionUrl: 'rabbitmq://mq'
                        Messaging__Username: '$(MqUsername)'
                        Messaging__Password: '$(MqPassword)'
                        Lucene__IndexPath: /index
                        Lucene__HunspellPath: /var/hunspell
                        Telegram__BotToken: '$(TelegramBotToken)'
                      volumes:
                        - ./hunspell:/var/hunspell
                        - index:/index
                      restart: always
                    db:
                      ports:
                        - '0.0.0.0:1433:1433'
                      environment:
                        ACCEPT_EULA: 'Y'
                        SA_PASSWORD: '$(DbPassword)'
                        MSSQL_PID: 'Express'
                      volumes:
                        - db:/var/opt/mssql
                      restart: always
                    backup:
                      image: bacr/backuputil
                      environment:
                        SqlBackup__ConnectionString: 'Server=tcp:$(DbHost),1433;User ID=$(DbUser);Password=$(DbPassword);MultipleActiveResultSets=false'
                        SqlBackup__Database: '$(DbName)'
                        SqlBackup__BackupPath: /var/opt/mssql/backup
                        DbBackupJob__BackupPath: /db/backup
                        DbBackupJob__StoragePath: backup
                        DbBackupJob__Archive: 'true'
                        Services__BackupUtil.Storage.IStorage: BackupUtil.Storage.AWSS3Storage
                        AWSS3Storage__AccessKey: $(S3AccessKey)
                        AWSS3Storage__SecretKey: $(S3SecretKey)
                        AWSS3Storage__BucketName: sakhatyla
                        AWSS3Storage__ServiceUrl: '$(S3ServiceUrl)'
                        BackupSchedulerJob__Db__0__Type: Full
                        BackupSchedulerJob__Db__0__Cron: '0 0 0 1 * ?'
                        BackupSchedulerJob__Db__1__Type: Differential
                        BackupSchedulerJob__Db__1__Cron: '0 0 1 ? * SUN'
                        BackupSchedulerJob__Db__2__Type: TransactionLog
                        BackupSchedulerJob__Db__2__Cron: '0 0 2 * * ?'
                      volumes:
                        - db:/db
                      restart: always
                    mq:
                      environment:
                        RABBITMQ_DEFAULT_USER: '$(MqUsername)'
                        RABBITMQ_DEFAULT_PASS: '$(MqPassword)'
                      volumes:
                        - mq:/var/lib/rabbitmq
                      restart: always
                    proxy:
                      image: nginxproxy/nginx-proxy
                      ports:
                        - '80:80'
                        - '443:443'
                      volumes:
                        - ./nginx/custom.conf:/etc/nginx/conf.d/st_custom.conf:ro
                        - certs:/etc/nginx/certs:ro
                        - html:/usr/share/nginx/html
                        - /var/run/docker.sock:/tmp/docker.sock:ro
                      labels:
                        - "com.github.nginx-proxy.nginx"
                      restart: always
                    letsencrypt:
                      image: nginxproxy/acme-companion
                      volumes:
                        - certs:/etc/nginx/certs:rw
                        - html:/usr/share/nginx/html
                        - acme:/etc/acme.sh
                        - /var/run/docker.sock:/var/run/docker.sock:ro
                      restart: always
                  volumes:
                    db:
                    mq:
                    index:
                    dpkeys:
                    html:
                    certs:
                    acme:
            - task: DockerCompose@1
              displayName: docker-compose pull
              inputs:
                containerregistrytype: 'Azure Container Registry'
                azureSubscription: 'bacr(3)(c4530747-c19d-4a6d-b3b6-8fa1904c8b65)'
                azureContainerRegistry: '{"loginServer":"bacrhub.azurecr.io", "id" : "/subscriptions/c4530747-c19d-4a6d-b3b6-8fa1904c8b65/resourceGroups/bacr/providers/Microsoft.ContainerRegistry/registries/bacrhub"}'
                dockerComposeFile: '$(AppDirectory)/docker-compose.yaml'
                additionalDockerComposeFiles: |
                  docker-compose.Release.yaml
                  docker-compose.$(Environment.Name).yaml
                projectName: 'sakhatyla'
                action: 'Run a Docker Compose command'
                dockerComposeCommand: 'pull'
            - task: file-creator@5
              displayName: create config.json
              inputs:
                fileoverwrite: true
                filepath: '$(AppDirectory)/webng/config.json'
                filecontent: |
                  {
                    "apiBaseUrl": "$(IdUrl)"
                  }
            - task: file-creator@5
              displayName: create custom nginx conf
              inputs:
                fileoverwrite: true
                filepath: '$(AppDirectory)/nginx/custom.conf'
                filecontent: |
                  gzip on;
                  gzip_types application/json application/xml text/plain text/css text/json text/xml image/svg+xml;
                  gzip_vary on;
            - task: DownloadSecureFile@1
              displayName: download sakhatyla.pfx
              inputs:
                secureFile: 'sakhatyla.pfx'
            - task: CopyFiles@2
              displayName: copy cert
              inputs:
                SourceFolder: '$(Agent.TempDirectory)'
                Contents: 'sakhatyla.pfx'
                TargetFolder: '$(AppDirectory)/cert/'
            - task: DockerCompose@1
              displayName: docker-compose up
              inputs:
                containerregistrytype: 'Azure Container Registry'
                azureSubscription: 'bacr(3)(c4530747-c19d-4a6d-b3b6-8fa1904c8b65)'
                azureContainerRegistry: '{"loginServer":"bacrhub.azurecr.io", "id" : "/subscriptions/c4530747-c19d-4a6d-b3b6-8fa1904c8b65/resourceGroups/bacr/providers/Microsoft.ContainerRegistry/registries/bacrhub"}'
                dockerComposeFile: '$(AppDirectory)/docker-compose.yaml'
                additionalDockerComposeFiles: |
                  docker-compose.Release.yaml
                  docker-compose.$(Environment.Name).yaml
                projectName: 'sakhatyla'
                action: 'Run a Docker Compose command'
                dockerComposeCommand: 'up -d --always-recreate-deps'
main(model) ::= <<
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Cynosura.Core.Data;
using Cynosura.Core.Services.Models;
using $model.Solution.Namespace$.Core.Entities;
using $model.Solution.Namespace$.Core.Requests.$model.Entity.PluralName$.Models;

namespace $model.Solution.Namespace$.Core.Requests.$model.Entity.PluralName$
{
    public class Get$model.Entity.PluralName$Handler : IRequestHandler<Get$model.Entity.PluralName$, PageModel<$model.Entity.Name$Model>\>
    {
        private readonly IEntityRepository<$model.Entity.Name$> _$model.Entity.NameLower$Repository;
        private readonly IMapper _mapper;

        public Get$model.Entity.PluralName$Handler(IEntityRepository<$model.Entity.Name$> $model.Entity.NameLower$Repository,
            IMapper mapper)
        {
            _$model.Entity.NameLower$Repository = $model.Entity.NameLower$Repository;
            _mapper = mapper;
        }

        public async Task<PageModel<$model.Entity.Name$Model>\> Handle(Get$model.Entity.PluralName$ request, CancellationToken cancellationToken)
        {
            IQueryable<$model.Entity.Name$> query = _$model.Entity.NameLower$Repository.GetEntities()$model.Entity.EntityFields:include(); separator=""$;            
            query = query.Filter(request.Filter);
            query = query.OrderBy(request.OrderBy, request.OrderDirection);
            var $model.Entity.PluralNameLower$ = await query.ToPagedListAsync(request.PageIndex, request.PageSize);
            return $model.Entity.PluralNameLower$.Map<$model.Entity.Name$, $model.Entity.Name$Model>(_mapper);
        }

    }
}

>>

include(field) ::= <<

                .Include(e => e.$field.Name$)
>>

textFilter(field) ::= <<
e.$field.Name$.Contains(request.Filter.Text)
>>
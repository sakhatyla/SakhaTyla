// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SakhaTyla.Data;

#nullable disable

namespace SakhaTyla.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220612021107_AddPagePublicationDate")]
    partial class AddPagePublicationDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<int>("FromLanguageId")
                        .HasColumnType("int");

                    b.Property<bool>("Fuzzy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ToLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("FromLanguageId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("Title");

                    b.HasIndex("ToLanguageId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.ArticleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("TagId");

                    b.HasIndex("ArticleId", "TagId")
                        .IsUnique();

                    b.ToTable("ArticleTags", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cover")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Synonym")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("Synonym")
                        .IsUnique();

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("BookAuthors", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookAuthorship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("BookAuthorships", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("PageId");

                    b.ToTable("BookLabels", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("BookPages", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreeOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.CommentContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("CommentContainers", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.EntityChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.ToTable("EntityChanges", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.FileGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Accept")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("FileGroups", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Menus", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("TreeOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("MenuId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("MenuItems", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Preview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TreeOrder")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TreePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentContainerId")
                        .IsUnique();

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("Pages", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("PageId")
                        .IsUnique()
                        .HasFilter("[PageId] IS NOT NULL");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Routes", (string)null);

                    b.HasCheckConstraint("CK_Routes_Parent", "[PageId] is not null");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("Widgets", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.WorkerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.ToTable("WorkerInfos", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.WorkerRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WorkerInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("WorkerInfoId");

                    b.ToTable("WorkerRuns", (string)null);
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.WorkerScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<string>("DayOfMonth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Hours")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Minutes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModificationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Seconds")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WorkerInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("ModificationUserId");

                    b.HasIndex("WorkerInfoId");

                    b.ToTable("WorkerScheduleTasks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Article", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.Language", "FromLanguage")
                        .WithMany()
                        .HasForeignKey("FromLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.Language", "ToLanguage")
                        .WithMany()
                        .HasForeignKey("ToLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreationUser");

                    b.Navigation("FromLanguage");

                    b.Navigation("ModificationUser");

                    b.Navigation("ToLanguage");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.ArticleTag", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.Article", "Article")
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Book", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookAuthor", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookAuthorship", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.BookAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookLabel", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.BookPage", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.BookPage", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("Book");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Category", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Comment", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("SakhaTyla.Core.Entities.CommentContainer", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Author");

                    b.Navigation("Container");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.CommentContainer", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.EntityChange", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.Navigation("CreationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.File", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.FileGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("Group");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.FileGroup", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Language", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Menu", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.MenuItem", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.MenuItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("CreationUser");

                    b.Navigation("Menu");

                    b.Navigation("ModificationUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Page", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.CommentContainer", "CommentContainer")
                        .WithOne("Page")
                        .HasForeignKey("SakhaTyla.Core.Entities.Page", "CommentContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.File", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.Page", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("CommentContainer");

                    b.Navigation("CreationUser");

                    b.Navigation("Image");

                    b.Navigation("ModificationUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Route", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.Page", "Page")
                        .WithOne("Route")
                        .HasForeignKey("SakhaTyla.Core.Entities.Route", "PageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Tag", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Widget", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.WorkerInfo", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.WorkerRun", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.WorkerInfo", "WorkerInfo")
                        .WithMany()
                        .HasForeignKey("WorkerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");

                    b.Navigation("WorkerInfo");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.WorkerScheduleTask", b =>
                {
                    b.HasOne("SakhaTyla.Core.Entities.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.User", "ModificationUser")
                        .WithMany()
                        .HasForeignKey("ModificationUserId");

                    b.HasOne("SakhaTyla.Core.Entities.WorkerInfo", "WorkerInfo")
                        .WithMany("ScheduleTasks")
                        .HasForeignKey("WorkerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationUser");

                    b.Navigation("ModificationUser");

                    b.Navigation("WorkerInfo");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Article", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.CommentContainer", b =>
                {
                    b.Navigation("Page");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.MenuItem", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.Page", b =>
                {
                    b.Navigation("Route");
                });

            modelBuilder.Entity("SakhaTyla.Core.Entities.WorkerInfo", b =>
                {
                    b.Navigation("ScheduleTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
